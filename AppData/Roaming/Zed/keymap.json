// keymap.json, generated at Thu Nov 07 2024 18:01:50 GMT+0800 (Singapore Standard Time)
[
  {
    "context": "Workspace",
    "bindings": {
      "ctrl-;": null,
      "alt-e": "workspace::ToggleRightDock",
      "space t h": "theme_selector::Toggle",
      "alt-q": [
        "task::Spawn",
        {
          "task_name": "run file"
        }
      ],
      "alt-w": "workspace::CloseWindow",
      "ctrl-j": null,
    }
  },
  {
    "context": "Workspace || Terminal",
    "bindings": {
      "alt-;": "workspace::ToggleBottomDock",
      "alt-w": "pane::CloseActiveItem",
      "alt-j": "pane::ActivateNextItem",
      "alt-k": "pane::ActivatePrevItem"
    }
  },
  {
    "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work in normal & visual mode
      "space e": "workspace::ToggleRightDock",
      "space o r": "projects::OpenRecent",
      // "space t h": "theme_selector::Toggle",
      "space x": "zed::Extensions",
      "alt-v": "pane::SplitVertical",
      "alt-h": "pane::SplitHorizontal",
      "space z z": "workspace::ToggleZoom",
      "space r f": "editor::ToggleFoldRecursive",
      "space z": "editor::ToggleFold",
      // Git
      "space g h d": "editor::ToggleHunkDiff",
      "space g h r": "editor::RevertSelectedHunks",
      // Toggle inlay hints
      "space t i": "editor::ToggleInlayHints",
      // Toggle soft wrap
      "space u w": "editor::ToggleSoftWrap",
      // NOTE: Toggle Zen mode, not fully working yet
      "space c z": "workspace::ToggleCenteredLayout",
      // Open markdown preview
      "space m p": "markdown::OpenPreview",
      "space m P": "markdown::OpenPreviewToTheSide",
      // Open recent project
      "space f p": "projects::OpenRecent",
      // Search word under cursor
      "space s w": "pane::DeploySearch",
      // Chat with AI
      // "space a c": "assistant::ToggleFocus",
      // Go to file with `gf`
      "g f": "editor::OpenExcerpts"
    }
  },
  // {
  //   "context": "Editor && vim_mode == normal && !menu",
  //   "bindings": {
  //     "space w": "workspace::Save",
  //     "space q": "pane::CloseActiveItem"
  //   }
  // },
  {
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      //my testing
      "space w": "workspace::Save",
      "space q": "pane::CloseActiveItem",
      // put key-bindings here if you want them to work only in normal mode
      // Window movement binding
      "space s a": "editor::SelectAll",
      // "space d a": [
      //   "editor::SelectAll",
      //   "editor::Cut"
      // ],
      "shift-l": "editor::Hover",
      "ctrl-;": null,
      // "alt-;": "workspace::ToggleBottomDock",
      // Ctrl jklk to move between panes
      // "shift-h": ["workspace::ActivatePaneInDirection", "Left"],
      //
      "p": "editor::Paste",
      "shift-j": "pane::ActivateNextItem",
      "shift-k": "pane::ActivatePrevItem",
      "ctrl-h": [
        "workspace::ActivatePaneInDirection",
        "Left"
      ],
      "ctrl-l": [
        "workspace::ActivatePaneInDirection",
        "Right"
      ],
      "ctrl-k": [
        "workspace::ActivatePaneInDirection",
        "Up"
      ],
      "ctrl-j": [
        "workspace::ActivatePaneInDirection",
        "Down"
      ],
      // +LSP
      "space c a": "editor::ToggleCodeActions",
      "c a": "editor::ToggleCodeActions",
      "space .": "editor::ToggleCodeActions",
      "space c r": "editor::Rename",
      "c r": "editor::Rename",
      "g d": "editor::GoToDefinition",
      "g D": "editor::GoToDefinitionSplit",
      "g i": "editor::GoToImplementation",
      "g I": "editor::GoToImplementationSplit",
      "g t": "editor::GoToTypeDefinition",
      "g T": "editor::GoToTypeDefinitionSplit",
      "g r": "editor::FindAllReferences",
      "] d": "editor::GoToDiagnostic",
      "[ d": "editor::GoToPrevDiagnostic",
      // TODO: Go to next/prev error
      "] e": "editor::GoToDiagnostic",
      "[ e": "editor::GoToPrevDiagnostic",
      // Symbol search
      "s s": "outline::Toggle",
      "s S": "project_symbols::Toggle",
      // Diagnostic
      "space x x": "diagnostics::Deploy",
      // +Git
      // Git prev/next hunk
      "] h": "editor::GoToHunk",
      "[ h": "editor::GoToPrevHunk",
      // TODO: git diff is not ready yet, refer https://github.com/zed-industries/zed/issues/8665#issuecomment-2194000497
      // + Buffers
      // Switch between buffers
      // "shift-h": "pane::ActivatePrevItem",
      // "shift-l": "pane::ActivateNextItem",
      // Close active panel
      // "shift-q": "pane::CloseActiveItem",
      // "ctrl-q": "pane::CloseActiveItem",
      // "space b d": "pane::CloseActiveItem",
      // Close other items
      "space c t": "pane::CloseInactiveItems",
      // Save file
      "ctrl-s": "workspace::Save",
      // File finder
      "space f f": "file_finder::Toggle",
      // Project search
      "space p f": "pane::DeploySearch",
      // "space q": "pane::CloseActiveItem",
      // TODO: Open other files
      // Show project panel with current file
      "space e": "pane::RevealInProjectPanel"
    }
  },
  // Empty pane, set of keybindings that are available when there is no active editor
  {
    "context": "EmptyPane || SharedScreen",
    "bindings": {
      // Open file finder
      "space space": "file_finder::Toggle",
      // Open recent project
      "space f p": "projects::OpenRecent"
    }
  },
  // Comment code
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !menu",
    "bindings": {
      // visual, visual line & visual block modes
      "g c": "editor::ToggleComments",
      "x": "editor::Cut"
    }
  },
  // Better escape
  // this sis
  {
    "context": "Editor && vim_mode == insert && !menu",
    "bindings": {
      "j k": "vim::NormalBefore", // remap jk in insert mode to escape
      "tab": "editor::AcceptInlineCompletion",
      "alt-i": "editor::ShowCompletions"
    }
  },
  // Rename
  {
    "context": "Editor && vim_operator == c",
    "bindings": {
      "c": "vim::CurrentLine",
      "r": "editor::Rename" // zed specific
    }
  },
  // Code Action
  {
    "context": "Editor && vim_operator == c",
    "bindings": {
      "c": "vim::CurrentLine",
      "a": "editor::ToggleCodeActions" // zed specific
    }
  },
  // Toggle terminal
  {
    "context": "Workspace",
    "bindings": {
      "alt-p": "command_palette::Toggle"
      // "space e": "assistant::ToggleFocus",
      // "ctrl-\\": "terminal_panel::ToggleFocus"
    }
  },
  {
    "context": "Terminal && !menu",
    "bindings": {
      "ctrl-h": [
        "workspace::ActivatePaneInDirection",
        "Left"
      ],
      "ctrl-l": [
        "workspace::ActivatePaneInDirection",
        "Right"
      ],
      "ctrl-k": [
        "workspace::ActivatePaneInDirection",
        "Up"
      ]
      // "ctrl-j": ["workspace::ActivatePaneInDirection", "Down"]
    }
  },
  // File panel (netrw)
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "a": "project_panel::NewFile",
      "A": "project_panel::NewDirectory",
      "r": "project_panel::Rename",
      "d": "project_panel::Delete",
      "x": "project_panel::Cut",
      "c": "project_panel::Copy",
      "p": "project_panel::Paste",
      "l": "project_panel::Open",
      "z a": "project_panel::CollapseAllEntries",
      "o e": "project_panel::RevealInFileManager",
      "y y": "project_panel::CopyPath",
      "y f": "project_panel::Duplicate",
      // Close project panel as project file panel on the right
      "q": "workspace::ToggleRightDock",
      "space e": "workspace::ToggleRightDock",
      // Navigate between panel
      "ctrl-h": [
        "workspace::ActivatePaneInDirection",
        "Left"
      ],
      "ctrl-l": [
        "workspace::ActivatePaneInDirection",
        "Right"
      ],
      "ctrl-k": [
        "workspace::ActivatePaneInDirection",
        "Up"
      ],
      // "ctrl-j": [
      //   "workspace::ActivatePaneInDirection",
      //   "Down"
      // ]
    }
  },
  // Panel nagivation
  {
    "context": "Dock",
    "bindings": {
      "ctrl-w h": [
        "workspace::ActivatePaneInDirection",
        "Left"
      ],
      "ctrl-w l": [
        "workspace::ActivatePaneInDirection",
        "Right"
      ],
      "ctrl-w k": [
        "workspace::ActivatePaneInDirection",
        "Up"
      ],
      "ctrl-w j": [
        "workspace::ActivatePaneInDirection",
        "Down"
      ]
    }
  },
  {
    "context": "Workspace",
    "bindings": {
      // Map VSCode like keybindings
      "cmd-b": "workspace::ToggleRightDock"
    }
  },
  // Run nearest task
  {
    "context": "EmptyPane || SharedScreen || vim_mode == normal",
    "bindings": {
      "space r t": [
        "editor::SpawnNearestTask",
        {
          "reveal": "no_focus"
        }
      ]
    }
  }
  // Subword motion is not working really nice with `ciw`, disable for now
  // {
  //   "context": "VimControl && !menu",
  //   "bindings": {
  //     "w": "vim::NextSubwordStart",
  //     "b": "vim::PreviousSubwordStart",
  //     "e": "vim::NextSubwordEnd",
  //     "g e": "vim::PreviousSubwordEnd"
  //   }
  // }
]
